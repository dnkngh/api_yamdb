# Проект api_yamdb

## Команда разработки:
Никита Норсеев

Денис Глазков

Юлия Ушенина

## Описание
Проект YaMDb собирает отзывы (Review) пользователей на произведения (Title). Произведения делятся на категории:
«Книги», «Фильмы», «Музыка». Список категорий (Category) может быть расширен (например, можно добавить категорию
«Изобразительное искусство» или «Ювелирка»).
Сами произведения в YaMDb не хранятся, здесь нельзя посмотреть фильм или послушать музыку.

В каждой категории есть произведения: книги, фильмы или музыка. Например, в категории «Книги» могут быть произведения
«Винни Пух и все-все-все» и «Марсианские хроники», а в категории «Музыка» — песня «Давеча» группы «Насекомые» и вторая
сюита Баха. Произведению может быть присвоен жанр из списка предустановленных (например, «Сказка», «Рок» или «Артхаус»). 

Новые жанры может создавать только администратор.

Благодарные или возмущённые читатели оставляют к произведениям текстовые отзывы (Review) и выставляют произведению
рейтинг (оценку в диапазоне от одного до десяти). Из множества оценок автоматически высчитывается средняя
оценка произведения.

## Технологии
- Python 3.7
- Django 2.2
- DRF
- JWT

## Запуск проекта в dev-режиме

1. Клонируйте репозиторий.
```
git clone https://github.com/dnkngh/api_yamdb
```
2. Установите и активируйте виртуальное окружение:
```
py -m venv venv 
source venv/scripts/activate
```
3. Обновите pip:
```
python -m pip install --upgrade pip
```
4. Установите зависимости:
```
pip install -r requirements.txt
```
5. Выполните миграции:
```
python manage.py migrate --run-syncdb
```
6. Создайте суперпользователя:
```
python manage.py createsuperuser
```
7. Запустите сервер в dev-режиме:
```
python manage.py runserver
```

## Пользовательские роли
- Аноним — может просматривать описания произведений, читать отзывы и комментарии.
- Аутентифицированный пользователь (user) — может, как и Аноним, читать всё, дополнительно он может публиковать отзывы и ставить оценку произведениям (фильмам/книгам/песенкам), может комментировать чужие отзывы; может редактировать и удалять свои отзывы и комментарии. Эта роль присваивается по умолчанию каждому новому пользователю.
- Модератор (moderator) — те же права, что и у Аутентифицированного пользователя плюс право удалять любые отзывы и комментарии.
- Администратор (admin) — полные права на управление всем контентом проекта. Может создавать и удалять произведения, категории и жанры. Может назначать роли пользователям.
- Суперюзер Django — обладет правами администратора (admin)

## Примеры работы с учетными записями через запросы к API
Подробная документация доступна по адресу `http://127.0.0.1:8000/redoc/`

Для неавторизованных пользователей работа с API доступна в режиме чтения, что-либо изменить или создать не получится.

### Регистрация нового пользователя
Получить код подтверждения на переданный email. 

- Права доступа: Доступно без токена.
- Использовать имя 'me' в качестве username запрещено. 
- Поля email и username должны быть уникальными.
- Регистрация нового пользователя:

Method:POST `/api/v1/auth/signup/`
```
{
 "email": "string",
 "username": "string"
}
```

### Получение JWT-токена:
Method:POST `/api/v1/auth/token/`
```

{
 "username": "string",
 "confirmation_code": "string"
}
```

### Получение списка всех пользователей.
- Права доступа: Администратор

Method:GET `/api/v1/users/`

### Добавление пользователя:
- Права доступа: Администратор
- Поля email и username должны быть уникальными.

Method:POST `/api/v1/users/`
```
{
"username": "string",
"email": "user@example.com",
"first_name": "string",
"last_name": "string",
"bio": "string",
"role": "user"
}
```
### Получение пользователя по username:
- Права доступа: Администратор

Method:GET `/api/v1/users/{username}/`

### Изменение данных пользователя по username:
- Права доступа: Администратор

Method:PATCH `/api/v1/users/{username}/`
```
{
 "username": "string",
 "email": "user@example.com",
 "first_name": "string",
 "last_name": "string",
 "bio": "string",
 "role": "user"
}
```

### Удаление пользователя по username:
- Права доступа: Администратор

Method: DELETE `/api/v1/users/{username}/`

### Получение данных своей учетной записи:
- Права доступа: Любой авторизованный пользователь

Method:GET `/api/v1/users/me/`

### Изменение данных своей учетной записи:
- Права доступа: Любой авторизованный пользователь

Method:PATCH `/api/v1/users/me/`

## Примеры работы с моделями Categories(Категории)
Дополнить.

## Примеры работы с моделями Genres(Жанры)
Дополнить.

## Примеры работы с моделями Titles(Произведения)
Дополнить.

## Примеры работы с моделями Reviews(Отзывы)

### Получения списка всех отзывов
- Права доступа: Любой пользователь

Method:GET `/api/v1/titles/{title_id}/reviews/`

### Создание нового отзыва
- Права доступа: Любой авторизованный пользователь

Method:POST `/api/v1/titles/{title_id}/reviews/`
```
{
  "text": "string",
  "score": 1
}
```

### Получение пользователя по ID
- Права доступа: Любой пользователь

Method:GET `/api/v1/titles/{title_id}/reviews/{review_id}/`
```
{
  "id": 0,
  "text": "string",
  "author": "string",
  "score": 1,
  "pub_date": "2019-08-24T14:15:22Z"
}
```
### Частичное обновление отзыва по ID
- Права доступа: Автор отзыва, модератор или администратор

Method:PATCH `/api/v1/titles/{title_id}/reviews/{review_id}/`
```
{
  "text": "string",
  "score": 1
}
```
### Удаление отзыва по ID
- Права доступа: Автор отзыва, модератор или администратор

Method:DELETE `/api/v1/titles/{title_id}/reviews/{review_id}/`

## Примеры работы с моделями Comments(Комментарии)

### Получения списка всех комментариев к отзыву
- Права доступа: Любой пользователь

Method:GET `/api/v1/titles/{title_id}/reviews/{review_id}/comments/`

### Добавление комментария к отзыву
- Права доступа: Любой авторизованный пользователь

Method:POST `/api/v1/titles/{title_id}/reviews/{review_id}/comments/`
```
{
  "text": "string"
}
```

### Добавление комментария к отзыву по ID
- Права доступа: Любой пользователь

Method:GET `/api/v1/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/`

### Частичное обновление комментария к отзыву по ID
- Права доступа: Автор отзыва, модератор или администратор

Method:PATCH `/api/v1/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/`
```
{
  "text": "string"
}
```
### Удаление комментария к отзыву по ID
- Права доступа: Автор отзыва, модератор или администратор

Method:DELETE `/api/v1/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/`
µС… РїРѕР»СЊР·РѕРІР°С‚РµР»РµР№.
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:GET `/api/v1/users/`

### Р”РѕР±Р°РІР»РµРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ:
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ
- РџРѕР»СЏ email Рё username РґРѕР»Р¶РЅС‹ Р±С‹С‚СЊ СѓРЅРёРєР°Р»СЊРЅС‹РјРё.

Method:POST `/api/v1/users/`
```
{
"username": "string",
"email": "user@example.com",
"first_name": "string",
"last_name": "string",
"bio": "string",
"role": "user"
}
```
### РџРѕР»СѓС‡РµРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ username:
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:GET `/api/v1/users/{username}/`

### РР·РјРµРЅРµРЅРёРµ РґР°РЅРЅС‹С… РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ username:
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:PATCH `/api/v1/users/{username}/`
```
{
 "username": "string",
 "email": "user@example.com",
 "first_name": "string",
 "last_name": "string",
 "bio": "string",
 "role": "user"
}
```

### РЈРґР°Р»РµРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ username:
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method: DELETE `/api/v1/users/{username}/`

### РџРѕР»СѓС‡РµРЅРёРµ РґР°РЅРЅС‹С… СЃРІРѕРµР№ СѓС‡РµС‚РЅРѕР№ Р·Р°РїРёСЃРё:
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ Р°РІС‚РѕСЂРёР·РѕРІР°РЅРЅС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:GET `/api/v1/users/me/`

### РР·РјРµРЅРµРЅРёРµ РґР°РЅРЅС‹С… СЃРІРѕРµР№ СѓС‡РµС‚РЅРѕР№ Р·Р°РїРёСЃРё:
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ Р°РІС‚РѕСЂРёР·РѕРІР°РЅРЅС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:PATCH `/api/v1/users/me/`

## РџСЂРёРјРµСЂС‹ СЂР°Р±РѕС‚С‹ СЃ РјРѕРґРµР»СЏРјРё Categories(РљР°С‚РµРіРѕСЂРёРё)
Р”РѕРїРѕР»РЅРёС‚СЊ.

## РџСЂРёРјРµСЂС‹ СЂР°Р±РѕС‚С‹ СЃ РјРѕРґРµР»СЏРјРё Genres(Р–Р°РЅСЂС‹)
Р”РѕРїРѕР»РЅРёС‚СЊ.

## РџСЂРёРјРµСЂС‹ СЂР°Р±РѕС‚С‹ СЃ РјРѕРґРµР»СЏРјРё Titles(РџСЂРѕРёР·РІРµРґРµРЅРёСЏ)
Р”РѕРїРѕР»РЅРёС‚СЊ.

## РџСЂРёРјРµСЂС‹ СЂР°Р±РѕС‚С‹ СЃ РјРѕРґРµР»СЏРјРё Reviews(РћС‚Р·С‹РІС‹)

### РџРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° РІСЃРµС… РѕС‚Р·С‹РІРѕРІ
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:GET `/api/v1/titles/{title_id}/reviews/`

### РЎРѕР·РґР°РЅРёРµ РЅРѕРІРѕРіРѕ РѕС‚Р·С‹РІР°
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ Р°РІС‚РѕСЂРёР·РѕРІР°РЅРЅС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:POST `/api/v1/titles/{title_id}/reviews/`
```
{
  "text": "string",
  "score": 1
}
```

### РџРѕР»СѓС‡РµРЅРёРµ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ ID
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:GET `/api/v1/titles/{title_id}/reviews/{review_id}/`
```
{
  "id": 0,
  "text": "string",
  "author": "string",
  "score": 1,
  "pub_date": "2019-08-24T14:15:22Z"
}
```
### Р§Р°СЃС‚РёС‡РЅРѕРµ РѕР±РЅРѕРІР»РµРЅРёРµ РѕС‚Р·С‹РІР° РїРѕ ID
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРІС‚РѕСЂ РѕС‚Р·С‹РІР°, РјРѕРґРµСЂР°С‚РѕСЂ РёР»Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:PATCH `/api/v1/titles/{title_id}/reviews/{review_id}/`
```
{
  "text": "string",
  "score": 1
}
```
### РЈРґР°Р»РµРЅРёРµ РѕС‚Р·С‹РІР° РїРѕ ID
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРІС‚РѕСЂ РѕС‚Р·С‹РІР°, РјРѕРґРµСЂР°С‚РѕСЂ РёР»Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:DELETE `/api/v1/titles/{title_id}/reviews/{review_id}/`

## РџСЂРёРјРµСЂС‹ СЂР°Р±РѕС‚С‹ СЃ РјРѕРґРµР»СЏРјРё Comments(РљРѕРјРјРµРЅС‚Р°СЂРёРё)

### РџРѕР»СѓС‡РµРЅРёСЏ СЃРїРёСЃРєР° РІСЃРµС… РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ Рє РѕС‚Р·С‹РІСѓ
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:GET `/api/v1/titles/{title_id}/reviews/{review_id}/comments/`

### Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°СЂРёСЏ Рє РѕС‚Р·С‹РІСѓ
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ Р°РІС‚РѕСЂРёР·РѕРІР°РЅРЅС‹Р№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:POST `/api/v1/titles/{title_id}/reviews/{review_id}/comments/`
```
{
  "text": "string"
}
```

### Р”РѕР±Р°РІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°СЂРёСЏ Рє РѕС‚Р·С‹РІСѓ РїРѕ ID
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: Р›СЋР±РѕР№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊ

Method:GET `/api/v1/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/`

### Р§Р°СЃС‚РёС‡РЅРѕРµ РѕР±РЅРѕРІР»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°СЂРёСЏ Рє РѕС‚Р·С‹РІСѓ РїРѕ ID
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРІС‚РѕСЂ РѕС‚Р·С‹РІР°, РјРѕРґРµСЂР°С‚РѕСЂ РёР»Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:PATCH `/api/v1/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/`
```
{
  "text": "string"
}
```
### РЈРґР°Р»РµРЅРёРµ РєРѕРјРјРµРЅС‚Р°СЂРёСЏ Рє РѕС‚Р·С‹РІСѓ РїРѕ ID
- РџСЂР°РІР° РґРѕСЃС‚СѓРїР°: РђРІС‚РѕСЂ РѕС‚Р·С‹РІР°, РјРѕРґРµСЂР°С‚РѕСЂ РёР»Рё Р°РґРјРёРЅРёСЃС‚СЂР°С‚РѕСЂ

Method:DELETE `/api/v1/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/`
